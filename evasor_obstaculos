
// CODIGO EVASOR DE OBSTACULOS
#include <Servo.h>

// Pines del sensor ultrasónico
const int trigPin = 11;
const int echoPin = 12;

// Pines del servo
const int servoPin = 10;
Servo sensorServo;

// Pines del L298N
const int IN1 = 5;
const int IN2 = 4;
const int IN3 = 3;
const int IN4 = 2;
const int ENA = 6;
const int ENB = 9;

// Umbral de distancia para detenerse (en cm)
const int distanciaMinima = 15;

void setup() {
  Serial.begin(9600);

  // Configurar pines ultrasónico
  pinMode(trigPin, OUTPUT);
  pinMode(echoPin, INPUT);

  // Configurar pines de motor
  pinMode(IN1, OUTPUT);
  pinMode(IN2, OUTPUT);
  pinMode(IN3, OUTPUT);
  pinMode(IN4, OUTPUT);
  pinMode(ENA, OUTPUT);
  pinMode(ENB, OUTPUT);

  // Iniciar servo
  sensorServo.attach(servoPin);
  sensorServo.write(90);  // posición central
  delay(500);
}

void loop() {
  // Escanear desde 60° a 120°
  for (int angulo = 60; angulo <= 120; angulo += 15) {
    sensorServo.write(angulo);
    delay(300);  // espera a que el servo se mueva
    int distancia = medirDistancia();
    Serial.print("Ángulo: ");
    Serial.print(angulo);
    Serial.print(" - Distancia: ");
    Serial.println(distancia);

    if (distancia < distanciaMinima) {
      detener();
      return;
    }
  }

  // Si no hay obstáculos, avanzar
  avanzar();
}

// Función para medir distancia con HC-SR04
int medirDistancia() {
  digitalWrite(trigPin, LOW);
  delayMicroseconds(2);

  digitalWrite(trigPin, HIGH);
  delayMicroseconds(10);
  digitalWrite(trigPin, LOW);

  long duracion = pulseIn(echoPin, HIGH);
  int distancia = duracion * 0.034 / 2;
  return distancia;
}

// Función para avanzar
void avanzar() {
  digitalWrite(IN1, HIGH);
  digitalWrite(IN2, LOW);
  digitalWrite(IN3, HIGH);
  digitalWrite(IN4, LOW);
  analogWrite(ENA, 150);  // Velocidad motor A
  analogWrite(ENB, 150);  // Velocidad motor B
}

// Función para detener los motores
void detener() {
  digitalWrite(IN1, LOW);
  digitalWrite(IN2, LOW);
  digitalWrite(IN3, LOW);
  digitalWrite(IN4, LOW);
  analogWrite(ENA, 0);
  analogWrite(ENB, 0);
}
